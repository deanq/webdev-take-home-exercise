{"version":3,"sources":["components/PetThumb.js","components/PetPreview.js","components/PetGrid.js","App.js","serviceWorker.js","index.js"],"names":["PetThumb","arguments","length","undefined","replace","react_default","a","createElement","className","onClick","this","props","react_lazyload_lib_default","height","offset","once","src","getThumbURL","image","alt","source","PureComponent","PetPreview","_this","document","addEventListener","e","key","PetGrid","state","selectedPet","pet","setState","_this2","map","i","src_components_PetThumb","Object","assign","selectPet","bind","src_components_PetPreview","deselectPet","renderPets","pets","getMorePets","App","url","URL","window","location","origin","fetch","then","response","json","data","toConsumableArray","concat","dogs","src_components_PetGrid","Boolean","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kYAsBeA,wLAhBX,OADuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,IACHG,QAAQ,OAAQ,4CAIhC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWC,QAAUC,KAAKC,MAAMF,SAC7CJ,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAUO,OAAQ,IAAKC,OAAQ,GAAIC,MAAI,GACrCV,EAAAC,EAAAC,cAAA,OACES,IAAMN,KAAKO,YAAYP,KAAKC,MAAMO,OAClCC,IAAMT,KAAKC,MAAMS,kBAXNC,iBCwBRC,sMAxBO,IAAAC,EAAAb,KAClBc,SAASC,iBAAiB,UAAW,SAAAC,GACrB,WAAVA,EAAEC,KACJJ,EAAKZ,MAAMF,YAEZ,oCAIH,OACEJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVC,QAAUC,KAAKC,MAAMF,SACxBJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OACES,IAAMN,KAAKC,MAAMO,MACjBC,IAAMT,KAAKC,MAAMS,mBAjBNC,kBC2CVO,6MAxCbC,MAAQ,CACNC,YAAa,+EAGLC,GACRrB,KAAKsB,SAAS,CAACF,YAAaC,0CAI5BrB,KAAKsB,SAAS,CAACF,YAAa,4CAGV,IAAAG,EAAAvB,KAClB,OADkBT,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,IACFiC,IAAI,SAACH,EAAKI,GAAN,OACd9B,EAAAC,EAAAC,cAAA,MAAIoB,IAAKQ,GACP9B,EAAAC,EAAAC,cAAC6B,EAADC,OAAAC,OAAA,GAAcP,EAAd,CACEtB,QAAUwB,EAAKM,UAAUC,KAAKP,EAAMF,0CAM1C,OACE1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXE,KAAKmB,MAAMC,aACXzB,EAAAC,EAAAC,cAACkC,EAADJ,OAAAC,OAAA,GAAgB5B,KAAKmB,MAAMC,YAA3B,CACIrB,QAAUC,KAAKgC,YAAYF,KAAK9B,SAEtCL,EAAAC,EAAAC,cAAA,UACEG,KAAKiC,WAAWjC,KAAKC,MAAMiC,OAE7BvC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,OACVC,QAAUC,KAAKC,MAAMkC,aAD7B,oBAhCcxB,iBC8BPyB,qNA5BbjB,MAAQ,CACNe,KAAM,uFAINlC,KAAKmC,oDAGO,IAAAZ,EAAAvB,KAGRqC,EAAM,IAAIC,IAAI,yBAA0BC,OAAOC,SAASC,QAC5DC,MAAML,GACHM,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAIvB,EAAKD,SAAS,CAE1BY,KAAKP,OAAAoB,EAAA,EAAApB,CAAKJ,EAAKJ,MAAMe,MAAjBc,OAAArB,OAAAoB,EAAA,EAAApB,CAA0BmB,EAAKG,4CAKvC,OACEtD,EAAAC,EAAAC,cAACqD,EAAD,CAAShB,KAAOlC,KAAKmB,MAAMe,KAC5BC,YAAcnC,KAAKmC,YAAYL,KAAK9B,eAxBvBW,kBCMEwC,QACW,cAA7BZ,OAAOC,SAASY,UAEe,UAA7Bb,OAAOC,SAASY,UAEhBb,OAAOC,SAASY,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAAS1C,SAAS2C,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,KAAK,SAAAkB,GACjCA,EAAaC","file":"static/js/main.6a24050b.chunk.js","sourcesContent":["import React, { PureComponent } from 'react'\nimport './PetThumb.css'\nimport LazyLoad from 'react-lazyload'\n\nclass PetThumb extends PureComponent {\n  getThumbURL(imageURL=\"\") {\n    return imageURL.replace(\"/raw\", \"/thumbs\")\n  }\n\n  render() {\n    return (\n      <div className=\"PetThumb\" onClick={ this.props.onClick } >\n        <LazyLoad height={200} offset={32} once >\n          <img\n            src={ this.getThumbURL(this.props.image) }\n            alt={ this.props.source } />\n        </LazyLoad>\n      </div>\n    )\n  }\n}\n\nexport default PetThumb;\n","import React, { PureComponent } from 'react'\nimport './PetPreview.css'\n\nclass PetPreview extends PureComponent {\n  componentDidMount() {\n    document.addEventListener(\"keydown\", e => {\n      if (e.key === \"Escape\") {\n        this.props.onClick();\n      }\n    }, false);\n  }\n\n  render() {\n    return (\n      <div className=\"PetPreview\">\n        <div className=\"background\"\n             onClick={ this.props.onClick }>\n          <div className=\"modal\">\n            <img\n              src={ this.props.image }\n              alt={ this.props.source } />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default PetPreview;\n","import React, { PureComponent } from 'react';\nimport './PetGrid.css';\nimport PetThumb from './PetThumb';\nimport PetPreview from './PetPreview';\n\nclass PetGrid extends PureComponent {\n  state = {\n    selectedPet: null\n  }\n\n  selectPet(pet) {\n    this.setState({selectedPet: pet})\n  }\n\n  deselectPet() {\n    this.setState({selectedPet: null})\n  }\n\n  renderPets(pets=[]) {\n    return pets.map((pet, i) => (\n      <li key={i}>\n        <PetThumb {...pet}\n          onClick={ this.selectPet.bind(this, pet) } />\n      </li>\n    ));\n  }\n\n  render() {\n    return (\n      <div className=\"PetGrid\">\n        { this.state.selectedPet &&\n          <PetPreview {...this.state.selectedPet}\n              onClick={ this.deselectPet.bind(this) } />\n        }\n        <ul>\n        { this.renderPets(this.props.pets) }\n        </ul>\n        <button className=\"more\"\n                onClick={ this.props.getMorePets }>\n          See More\n        </button>\n      </div>\n    )\n  }\n}\n\nexport default PetGrid;\n","import React, { PureComponent } from 'react';\nimport 'babel-polyfill';\nimport './App.css';\nimport PetGrid from './components/PetGrid';\nimport 'cross-fetch';\n\nclass App extends PureComponent {\n  state = {\n    pets: []\n  }\n\n  componentDidMount() {\n    this.getMorePets();\n  }\n\n  getMorePets() {\n  \t// TODO: This should be a separate API client module.\n  \t// For the sake of the demo, this is hard-coded here.\n    let url = new URL('/assets/data/dogs.json', window.location.origin);\n    fetch(url)\n      .then(response => response.json())\n      .then(data => this.setState({\n      \t// Append to current pets and reassign as new state\n        pets: [...this.state.pets, ...data.dogs]\n      }));\n  }\n\n  render() {\n    return (\n      <PetGrid pets={ this.state.pets }\n\t    getMorePets={ this.getMorePets.bind(this) } />\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}